/*
 * This file is part of HiKoB Openlab.
 *
 * HiKoB Openlab is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, version 3.
 *
 * HiKoB Openlab is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with HiKoB Openlab. If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * Copyright (C) 2011 HiKoB.
 */

/*
 * memmap.h
 *
 *  Created on: Oct 22, 2011
 *      Author: Cl√©ment Burin des Roziers <clement.burin-des-roziers.at.hikob.com>
 */

#ifndef MEMMAP_H_
#define MEMMAP_H_

#include <stdint.h>
#include "cm3_memmap.h"

enum
{
    FSMC_BASE_ADDRESS = 0xA0000000,
    RNG_BASE_ADDRESS = 0x50060800,
    HASH_BASE_ADDRESS = 0x50060400,
    CRYP_BASE_ADDRESS = 0x50060000,
    DCMI_BASE_ADDRESS = 0x50050000,
    USB_OTG_FS_BASE_ADDRESS = 0x50000000,
    USB_OTG_HS_BASE_ADDRESS = 0x40040000,
    ETHMAC_BASE_ADDRESS = 0x40028000,
    DMA2_BASE_ADDRESS = 0x40026400,
    DMA1_BASE_ADDRESS = 0x40026000,
    BKPSRAM_BASE_ADDRESS = 0x40024000,
    FLASH_BASE_ADDRESS = 0x40023C00,
    RCC_BASE_ADDRESS = 0x40023800,
    CRC_BASE_ADDRESS = 0x40023000,
    GPIOI_BASE_ADDRESS = 0x40022000,
    GPIOH_BASE_ADDRESS = 0x40021C00,
    GPIOG_BASE_ADDRESS = 0x40021800,
    GPIOF_BASE_ADDRESS = 0x40021400,
    GPIOE_BASE_ADDRESS = 0x40021000,
    GPIOD_BASE_ADDRESS = 0x40020C00,
    GPIOC_BASE_ADDRESS = 0x40020800,
    GPIOB_BASE_ADDRESS = 0x40020400,
    GPIOA_BASE_ADDRESS = 0x40020000,
    TIM11_BASE_ADDRESS = 0x40014800,
    TIM10_BASE_ADDRESS = 0x40014400,
    TIM9_BASE_ADDRESS = 0x40014000,
    EXTI_BASE_ADDRESS = 0x40013C00,
    SYSCFG_BASE_ADDRESS = 0x40013800,
    SPI1_BASE_ADDRESS = 0x40013000,
    SDIO_BASE_ADDRESS = 0x40012C00,
    ADC_BASE_ADDRESS = 0x40012000,
    USART6_BASE_ADDRESS = 0x40011400,
    USART1_BASE_ADDRESS = 0x40011000,
    TIM8_BASE_ADDRESS = 0x40010400,
    TIM1_BASE_ADDRESS = 0x40010000,

    DAC_BASE_ADDRESS = 0x40007400,
    PWR_BASE_ADDRESS = 0x40007000,
    CAN2_BASE_ADDRESS = 0x40006800,
    CAN1_BASE_ADDRESS = 0x40006400,
    I2C3_BASE_ADDRESS = 0x40005C00,
    I2C2_BASE_ADDRESS = 0x40005800,
    I2C1_BASE_ADDRESS = 0x40005400,
    UART5_BASE_ADDRESS = 0x40005000,
    UART4_BASE_ADDRESS = 0x40004C00,
    USART3_BASE_ADDRESS = 0x40004800,
    USART2_BASE_ADDRESS = 0x40004400,
    I2S3EXT_BASE_ADDRESS = 0x40004000,
    SPI3_BASE_ADDRESS = 0x40003C00,
    SPI2_BASE_ADDRESS = 0x40003800,
    I2S2EXT_BASE_ADDRESS = 0x40003400,
    IWDG_BASE_ADDRESS = 0x40003000,
    WWDG_BASE_ADDRESS = 0x40002C00,
    RTC_BASE_ADDRESS = 0x40002800,
    TIM14_BASE_ADDRESS = 0x40002000,
    TIM13_BASE_ADDRESS = 0x40001C00,
    TIM12_BASE_ADDRESS = 0x40001800,
    TIM7_BASE_ADDRESS = 0x40001400,
    TIM6_BASE_ADDRESS = 0x40001000,
    TIM5_BASE_ADDRESS = 0x40000C00,
    TIM4_BASE_ADDRESS = 0x40000800,
    TIM3_BASE_ADDRESS = 0x40000400,
    TIM2_BASE_ADDRESS = 0x40000000,
};

/* RCC section */
enum
{
    RCC_CR_OFFSET = 0x00,
    RCC_PLLCFGR_OFFSET = 0x04,
    RCC_CFGR_OFFSET = 0x08,
    RCC_CIR_OFFSET = 0x0C,
    RCC_AHB1RSTR_OFFSET = 0x10,
    RCC_AHB2RSTR_OFFSET = 0x14,
    RCC_AHB3RSTR_OFFSET = 0x18,
    RCC_APB1RSTR_OFFSET = 0x20,
    RCC_APB2RSTR_OFFSET = 0x24,
    RCC_AHB1ENR_OFFSET = 0x30,
    RCC_AHB2ENR_OFFSET = 0x34,
    RCC_AHB3ENR_OFFSET = 0x38,
    RCC_APB1ENR_OFFSET = 0x40,
    RCC_APB2ENR_OFFSET = 0x44,
    RCC_AHB1LPENR_OFFSET = 0x50,
    RCC_AHB2LPENR_OFFSET = 0x54,
    RCC_AHB3LPENR_OFFSET = 0x58,
    RCC_APB1LPENR_OFFSET = 0x60,
    RCC_APB2LPENR_OFFSET = 0x64,
    RCC_BDCR_OFFSET = 0x70,
    RCC_CSR_OFFSET = 0x74,
    RCC_SSCGR_OFFSET = 0x80,
    RCC_PLLI2SCFGR_OFFSET = 0x84
};

/* FLASH section */
enum
{
    FLASH_ACR_OFFSET = 0x00,
    FLASH_KEYR_OFFSET = 0x04,
    FLASH_OPTKEYR_OFFSET = 0x08,
    FLASH_SR_OFFSET = 0x0C,
    FLASH_CR_OFFSET = 0x10,
    FLASH_OPTCR_OFFSET = 0x14,
};

/* GPIO section */
enum
{
    GPIOx_MODER_OFFSET = 0x00,
    GPIOx_OTYPER_OFFSET = 0x04,
    GPIOx_OSPEEDR_OFFSET = 0x08,
    GPIOx_PUPDR_OFFSET = 0x0C,
    GPIOx_IDR_OFFSET = 0x10,
    GPIOx_ODR_OFFSET = 0x14,
    GPIOx_BSRR_OFFSET = 0x18,
    GPIOx_LCKR_OFFSET = 0x1C,
    GPIOx_AFRL_OFFSET = 0x20,
    GPIOx_AFRH_OFFSET = 0x24
};

/* SPI section */
enum
{
    SPIx_CR1_OFFSET = 0x00,
    SPIx_CR2_OFFSET = 0x04,
    SPIx_SR_OFFSET = 0x08,
    SPIx_DR_OFFSET = 0x0C,
    SPIx_CRCPR_OFFSET = 0x10,
    SPIx_RXCRCR_OFFSET = 0x14,
    SPIx_TXCRCR_OFFSET = 0x18
};

/* UART section */
enum
{
    USARTx_SR_OFFSET = 0x00,
    USARTx_DR_OFFSET = 0x04,
    USARTx_BRR_OFFSET = 0x08,
    USARTx_CR1_OFFSET = 0x0C,
    USARTx_CR2_OFFSET = 0x10,
    USARTx_CR3_OFFSET = 0x14,
    USARTx_GTPR_OFFSET = 0x18,
};

/* I2C section */
enum
{
    I2Cx_CR1_OFFSET = 0x00,
    I2Cx_CR2_OFFSET = 0x04,
    I2Cx_OAR1_OFFSET = 0x08,
    I2Cx_OAR2_OFFSET = 0x0C,
    I2Cx_DR_OFFSET = 0x10,
    I2Cx_SR1_OFFSET = 0x14,
    I2Cx_SR2_OFFSET = 0x18,
    I2Cx_CCR_OFFSET = 0x1C,
    I2Cx_TRISE_OFFSET = 0x20,
};

/* TIM section */
enum
{
    TIMx_CR1_OFFSET = 0x00,
    TIMx_CR2_OFFSET = 0x04,
    TIMx_SMCR_OFFSET = 0x08,
    TIMx_DIER_OFFSET = 0x0C,
    TIMx_SR_OFFSET = 0x10,
    TIMx_EGR_OFFSET = 0x14,
    TIMx_CCMR1_OFFSET = 0x18,
    TIMx_CCMR2_OFFSET = 0x1C,
    TIMx_CCER_OFFSET = 0x20,
    TIMx_CNT_OFFSET = 0x24,
    TIMx_PSC_OFFSET = 0x28,
    TIMx_ARR_OFFSET = 0x2C,
    TIMx_CCR1_OFFSET = 0x34,
    TIMx_CCR2_OFFSET = 0x38,
    TIMx_CCR3_OFFSET = 0x3C,
    TIMx_CCR4_OFFSET = 0x40,
    TIMx_BDTR_OFFSET = 0x44,
    TIMx_DCR_OFFSET = 0x48,
    TIMx_DMAR_OFFSET = 0x4C,
    TIMx_OR_OFFSET = 0x50
};

/* ADC section */
enum
{
    ADC1_OFFSET = 0x000,
    ADC2_OFFSET = 0x100,
    ADC3_OFFSET = 0x200,

    ADCx_SR_OFFSET = 0x00,
    ADCx_CR1_OFFSET = 0x04,
    ADCx_CR2_OFFSET = 0x08,
    ADCx_SMPR1_OFFSET = 0x0C,
    ADCx_SMPR2_OFFSET = 0x10,
    ADCx_JOFR1_OFFSET = 0x14,
    ADCx_JOFR2_OFFSET = 0x18,
    ADCx_JOFR3_OFFSET = 0x1C,
    ADCx_JOFR4_OFFSET = 0x20,
    ADCx_HTR_OFFSET = 0x24,
    ADCx_LTR_OFFSET = 0x28,
    ADCx_SQR1_OFFSET = 0x2C,
    ADCx_SQR2_OFFSET = 0x30,
    ADCx_SQR3_OFFSET = 0x34,
    ADCx_JSQR_OFFSET = 0x38,
    ADCx_JDR1_OFFSET = 0x3C,
    ADCx_JDR2_OFFSET = 0x40,
    ADCx_JDR3_OFFSET = 0x44,
    ADCx_JDR4_OFFSET = 0x48,
    ADCx_DR_OFFSET = 0x4C,

    ADC_CSR_OFFSET = 0x300,
    ADC_CCR_OFFSET = 0x304,
    ADC_CDR_OFFSET = 0x308,
};

/* SYSCFG section */
enum
{
    SYSCFG_MEMRM_OFFSET = 0x00,
    SYSCFG_PMC_OFFSET = 0x04,
    SYSCFG_EXTICR1_OFFSET = 0x08,
    SYSCFG_EXTICR2_OFFSET = 0x0C,
    SYSCFG_EXTICR3_OFFSET = 0x10,
    SYSCFG_EXTICR4_OFFSET = 0x14,
    SYSCFG_CMPCR_OFFSET = 0x20,
};

/* PWR section */
enum
{
    PWR_CR_OFFSET = 0x00,
    PWR_CSR_OFFSET = 0x04,
};

/* EXTI section */
enum
{
    EXTI_IMR_OFFSET = 0x00,
    EXTI_EMR_OFFSET = 0x04,
    EXTI_RTSR_OFFSET = 0x08,
    EXTI_FTSR_OFFSET = 0x0C,
    EXTI_SWIER_OFFSET = 0x10,
    EXTI_PR_OFFSET = 0x14,
};

/* DMA section */
enum
{
    DMAx_LISR_OFFSET = 0x0000,
    DMAx_HISR_OFFSET = 0x0004,
    DMAx_LIFCR_OFFSET = 0x0008,
    DMAx_HIFCR_OFFSET = 0x000C,
    DMAx_S0CR_OFFSET = 0x0010,
    DMAx_S0NDTR_OFFSET = 0x0014,
    DMAx_S0PAR_OFFSET = 0x0018,
    DMAx_S0M0AR_OFFSET = 0x001C,
    DMAx_S0M1AR_OFFSET = 0x0020,
    DMAx_S0FCR_OFFSET = 0x0024,

    DMAx_STREAM_OFFSET = 0x18
};

/* CAN section */
enum
{
    CAN_MCR_OFFSET = 0x0000,
    CAN_MSR_OFFSET = 0x0004,
    CAN_TSR_OFFSET = 0x0008,
    CAN_RF0R_OFFSET = 0x000C,
    CAN_RF1R_OFFSET = 0x0010,
    CAN_IER_OFFSET = 0x0014,
    CAN_ESR_OFFSET = 0x0018,
    CAN_BTR_OFFSET = 0x001C,

    CAN_TI0R_OFFSET = 0x0180,
    CAN_TDT0R_OFFSET = 0x0184,
    CAN_TDL0R_OFFSET = 0x0188,
    CAN_TDH0R_OFFSET = 0x018C,

    CAN_TIxR_OFFSET = 0x10,

    CAN_TI1R_OFFSET = 0x0190,
    CAN_TDT1R_OFFSET = 0x0194,
    CAN_TDL1R_OFFSET = 0x0198,
    CAN_TDH1R_OFFSET = 0x019C,
    CAN_TI2R_OFFSET = 0x01A0,
    CAN_TDT2R_OFFSET = 0x01A4,
    CAN_TDL2R_OFFSET = 0x01A8,
    CAN_TDH2R_OFFSET = 0x01AC,
    CAN_RI0R_OFFSET = 0x01B0,
    CAN_RDT0R_OFFSET = 0x01B4,
    CAN_RDL0R_OFFSET = 0x01B8,
    CAN_RDH0R_OFFSET = 0x01BC,

    CAN_RIxR_OFFSET = 0x10,

    CAN_RI1R_OFFSET = 0x01C0,
    CAN_RDT1R_OFFSET = 0x01C4,
    CAN_RDL1R_OFFSET = 0x01C8,
    CAN_RDH1R_OFFSET = 0x01CC,

    CAN_FMR_OFFSET = 0x0200,
    CAN_FM1R_OFFSET = 0x0204,
    CAN_FS1R_OFFSET = 0x020C,
    CAN_FFA1R_OFFSET = 0x0214,
    CAN_FA1R_OFFSET = 0x021C,
    CAN_F0R1_OFFSET = 0x0240,
    CAN_F0R2_OFFSET = 0x0244,
    CAN_FORx_OFFSET = 0x8
};

enum
{
    ETHMAC_MACCR_OFFSET = 0x0000,
    ETHMAC_MACFFR_OFFSET = 0x0004,
    ETHMAC_MACHTHR_OFFSET = 0x0008,
    ETHMAC_MACHTLR_OFFSET = 0x000C,
    ETHMAC_MACMIIAR_OFFSET = 0x0010,
    ETHMAC_MACMIIDR_OFFSET = 0x0014,
    ETHMAC_MACFCR_OFFSET = 0x0018,
    ETHMAC_MACVLANTR_OFFSET = 0x001C,
    ETHMAC_MACRWUFFR_OFFSET = 0x0028,
    ETHMAC_MACPMTCSR_OFFSET = 0x002C,

    ETHMAC_MACDBGR_OFFSET = 0x0034,
    ETHMAC_MACSR_OFFSET = 0x0038,
    ETHMAC_MACIMR_OFFSET = 0x003C,
    ETHMAC_MACA0HR_OFFSET = 0x0040,
    ETHMAC_MACA0LR_OFFSET = 0x0044,
    ETHMAC_MACA1HR_OFFSET = 0x0048,
    ETHMAC_MACA1LR_OFFSET = 0x004C,
    ETHMAC_MACA2HR_OFFSET = 0x0050,
    ETHMAC_MACA2LR_OFFSET = 0x0054,
    ETHMAC_MACA3HR_OFFSET = 0x0058,
    ETHMAC_MACA3LR_OFFSET = 0x005C,
    ETHMAC_MMCCR_OFFSET = 0x0100,
    ETHMAC_MMCRIR_OFFSET = 0x0104,
    ETHMAC_MMCTIR_OFFSET = 0x0108,
    ETHMAC_MMCRIMR_OFFSET = 0x010C,
    ETHMAC_MMCTIMR_OFFSET = 0x0110,
    ETHMAC_MMCTGFSCCR_OFFSET = 0x014C,
    ETHMAC_MMCTGFMSCCR_OFFSET = 0x0150,



    ETHMAC_MMCTGFCR_OFFSET = 0x0168,
    ETHMAC_MMCRFCER_OFFSET = 0x0194,
    ETHMAC_MMCRFAECR_OFFSET = 0x0198,
    ETHMAC_MMCRGUFCR_OFFSET = 0x01C4,
    ETHMAC_PTPTSCR_OFFSET = 0x0700,
    ETHMAC_PTPSSIR_OFFSET = 0x0704,
    ETHMAC_PTPTSHR_OFFSET = 0x0708,
    ETHMAC_PTPTSLR_OFFSET = 0x070C,
    ETHMAC_PTPTSHUR_OFFSET = 0x0710,
    ETHMAC_PTPTSLUR_OFFSET = 0x0714,
    ETHMAC_PTPTSAR_OFFSET = 0x0718,
    ETHMAC_PTPTTHR_OFFSET = 0x071C,
    ETHMAC_PTPTTLR_OFFSET = 0x0720,
    ETHMAC_PTPTSSR_OFFSET = 0x0728,
    ETHMAC_DMABMR_OFFSET = 0x1000,
    ETHMAC_DMATPDR_OFFSET = 0x1004,
    ETHMAC_DMARPDR_OFFSET = 0x1008,
    ETHMAC_DMARDLAR_OFFSET = 0x100C,
    ETHMAC_DMATDLAR_OFFSET = 0x1010,
    ETHMAC_DMASR_OFFSET = 0x1014,

    ETHMAC_DMAOMR_OFFSET = 0x1018,
    ETHMAC_DMAIER_OFFSET = 0x101C,
    ETHMAC_DMAMFBOCR_OFFSET = 0x1020,
    ETHMAC_DMARSWTR_OFFSET = 0x1024,
    ETHMAC_DMACHTDR_OFFSET = 0x1048,
    ETHMAC_DMACHRDR_OFFSET = 0x104C,
    ETHMAC_DMACHTBAR_OFFSET = 0x1050,
    ETHMAC_DMACHRBAR_OFFSET = 0x1054,
};

// Debug
enum
{
    DBGMCU_APB1_FZ = 0xE0042008,
    DBGMCU_APB2_FZ = 0xE004200C
};

/* Unique 96bit ID section */
#define UNIQUE_ID_BASE_ADDRESS  0x1FFF7A10

/* CRC Offsets */
enum
{
    CRC_DR_OFFSET = 0x00,
    CRC_IDR_OFFSET = 0x04,
    CRC_CR_OFFSET = 0x08,
};

/* Independent Watchdog Offsets */
enum
{
    IWDG_KR_OFFSET = 0x00,
    IWDG_PR_OFFSET = 0x04,
    IWDG_RLR_OFFSET = 0x08,
    IWDG_SR_OFFSET = 0x0C,
};

#endif /* MEMMAP_H_ */
